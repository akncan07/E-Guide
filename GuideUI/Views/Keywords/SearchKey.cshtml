@model GuideUI.Models.KeywordListData;

@{
    Layout = null;
}

<!DOCTYPE html>

<html class="dark">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="https://cdn.tailwindcss.com"></script>
    <script>
        tailwind.config = {
            darkMode: 'class',
            theme: {
                extend: {
                    colors: {
                        clifford: '#fff',
                    }
                }
            }
        }
    </script>
    <style>
        .opened {
            display: block;
        }

        .closed {
            display: none;
        }
    </style>
</head>


<body class="bg-slate-50 dark:bg-gray-700">

    <main class="container mx-auto mt-6 ">
        <div class="flex flex-wrap md:flex-nowrap mb-3 ">
            <section class="w-full">

                <div class="rounded-lg px-6 py-4 mx-3 mb-3 flex justify-between align-center shadow-[0_0px_10px_0px_rgba(0,0,0,0.2)] flex justify-between items-center flex-wrap">
                   @* <div class="flex rounded-md bg-slate-700 text-slate-700 px-3 py-2  dark:text-gray-300 dark:bg-slate-600  justify-between  items-center">
                        @foreach (var item in Model.Platforms)
                        {
                            <a href="/@Model.CurrentLanguage/@item.PlatformName/@Model.SystemLanguage.UrlKeywordText()/@Model.KeywordId" class="px-4 mr-2  h-9  flex items-center justify-center @(item.PlatformName == Model.CurrentPlatform ? "rounded-md  dark:bg-slate-500 " : "") "> @item.PlatformName </a>
                        }
                    </div>*@

                    <div class="flex items-center">
                        <svg class="fill-gray-400 " xmlns="http://www.w3.org/2000/svg" height="24" width="24"><path d="m19.6 21-6.3-6.3q-.75.6-1.725.95Q10.6 16 9.5 16q-2.725 0-4.612-1.887Q3 12.225 3 9.5q0-2.725 1.888-4.613Q6.775 3 9.5 3t4.613 1.887Q16 6.775 16 9.5q0 1.1-.35 2.075-.35.975-.95 1.725l6.3 6.3ZM9.5 14q1.875 0 3.188-1.312Q14 11.375 14 9.5q0-1.875-1.312-3.188Q11.375 5 9.5 5 7.625 5 6.312 6.312 5 7.625 5 9.5q0 1.875 1.312 3.188Q7.625 14 9.5 14Z" /></svg>
                        <input class=" bg-gray-700   appearance-none  w-full py-2 px-3 text-gray-400 font-semibold leading-tight focus:outline-none focus:shadow-outline"
                               id="search" type="text" placeholder="@Model.SystemLanguage.SearchText()">
                    </div>

                </div>

                @foreach (var item in Model.Guides)
                {
                    <div class="rounded-lg px-6 py-4 mx-3 mb-3 flex justify-between align-center shadow-[0_0px_10px_0px_rgba(0,0,0,0.2)] ">
                        <div class="text-slate-900  dark:text-gray-300 flex flex-col">
                            <span class="text-xl hover:underline decoration-2 text-slate-800 dark:text-gray-300">@item.Title</span>
@*                            <span class="text-sm text-slate-800 dark:text-gray-300"> @Model.SystemLanguage.UpdatedAtText() @item.UptadedAt.ToShortDateString() </span>
*@                        </div>

                        <div class="flex">
                            @foreach (var content in Model.Content)
                            {
                                if(item.GuideId == content.GuideId)
                                {
                                    <span>@content.PlatformName </span>
                                }

                            }
                        </div>




                    </div>
                }
            </section>
        </div>
    </main>



    <script>
        // On page load or when changing themes, best to add inline in `head` to avoid FOUC
        if (localStorage.getItem('color-theme') === 'dark' || (!('color-theme' in localStorage) && window.matchMedia('(prefers-color-scheme: dark)').matches)) {
            document.documentElement.classList.add('dark');
        } else {
            document.documentElement.classList.remove('dark')
        }

        var themeToggleDarkIcon = document.getElementById('theme-toggle-dark-icon');
        var themeToggleLightIcon = document.getElementById('theme-toggle-light-icon');

        // Change the icons inside the button based on previous settings
        if (localStorage.getItem('color-theme') === 'dark' || (!('color-theme' in localStorage) && window.matchMedia('(prefers-color-scheme: dark)').matches)) {
            themeToggleLightIcon.classList.remove('hidden');
        } else {
            themeToggleDarkIcon.classList.remove('hidden');
        }

        var themeToggleBtn = document.getElementById('theme-toggle');
        var themeText = document.getElementById('theme-text')

        themeToggleBtn.addEventListener('click', function() {

            // toggle icons inside button
            themeToggleDarkIcon.classList.toggle('hidden');
            themeToggleLightIcon.classList.toggle('hidden');

            // if set via local storage previously
            if (localStorage.getItem('color-theme')) {
                if (localStorage.getItem('color-theme') === 'light') {
                    document.documentElement.classList.add('dark');
                    localStorage.setItem('color-theme', 'dark');
                } else {
                    document.documentElement.classList.remove('dark');
                    localStorage.setItem('color-theme', 'light');
                }

                // if NOT set via local storage previously
            } else {
                if (document.documentElement.classList.contains('dark')) {
                    document.documentElement.classList.remove('dark');
                    localStorage.setItem('color-theme', 'light');
                } else {
                    document.documentElement.classList.add('dark');
                    localStorage.setItem('color-theme', 'dark');
                }
            }

        });

    </script>
</body>
</html>
